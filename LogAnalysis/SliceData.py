import csv
from datetime import datetime, date


def slice_time_and_record(slice_time, list):  # 시간 단위로 나눠서 표로 저장함
    """
    :param slice_time: microsec 로 자르고 싶은 시간
    :param list: process monitor 에서 수집한 log data 를 가지고있는 list
    :return:
    """
    # 1 : index of file name
    # 3 : index of reg func name

    dict_of_sets = __get_regfunc_and_file_name(list, index_of_func=3, index_of_filename=1)
    set_of_regfunc = dict_of_sets['func_name']
    set_of_filename = dict_of_sets['file_name']

    file_obj_controller = {}  # 모든 reg func에 대한 file 객체 생성
    writer_controller = {}

    for reg_func_name in set_of_regfunc:
        try:
            csv_file = open(reg_func_name + '.csv', 'w', newline='')
            file_obj_controller[reg_func_name] = csv_file
            data_writer = csv.DictWriter(csv_file,
                                         fieldnames=set_of_filename)  # file name을 col로 두고 row를 time slice 로 한다
            data_writer.writeheader()  # header 입력
            writer_controller[reg_func_name] = data_writer
        except:
            print("error")

    number_of_row = __cal_length_of_csv_col(slice_time, list[0][0], list[len(list) - 1][0])
    result = {}  # 배열 형성 filename : key, value : 빈도수
    for reg_func_name in set_of_regfunc:
        result[reg_func_name] = {}
    # slice 만큼 잘라서 저장

    # insert all
    __close_file_controller(file_obj_controller)  # 모든 객체 소멸


def __get_regfunc_and_file_name(data_list, index_of_func, index_of_filename):
    """
    :param data_list: list of data
    :param index_of_func: index of reg function
    :param index_of_filename: index of file name
    :return: dict of set
    """
    set_of_filename = set()
    set_of_regfunc = set()
    for each_list_data in data_list:
        set_of_filename.add(each_list_data[index_of_filename])
        set_of_regfunc.add(each_list_data[index_of_func])

    return {'file_name': set_of_filename, 'func_name': set_of_regfunc}


def __insert_all_in_file(result_list, writer_controller, set_of_regfunc):
    """
    :param result_list: all the time sliced data
    :param writer_controller: which file I would like to write
    :param set_of_regfunc: regfunc name set
    :return:
    """
    pass


def __cal_length_of_csv_col(slice_time, start_time, last_time):  # 해당 얼마만큼 row 를 가질지 에 대한 것
    return __date_to_microseconds(__cal_time(start_time, last_time)) / slice_time


def __record_each_data_in_list(slice_time, list):
    """
    해당 time 만큼 나눠서 저장
    :param slice_time : 짜르고자 하는 단위
    :param list : 모든 data
    :return:
    """
    pass


def __close_file_controller(dict_of_files):
    for dict_data in dict_of_files:
        dict_of_files[dict_data].close()


def __cal_time(first_time, second_time):
    """
    :param first_time: time obj of start time
    :param second_time: time obj of end time
    :return: datetime type of obj of subtract of them
    """

    datetime_a = datetime.combine(date.today(), first_time)
    datetime_b = datetime.combine(date.today(), second_time)
    # Get the difference between datetimes (as timedelta)

    date_time_difference = datetime_b - datetime_a
    # Divide difference in seconds by number of seconds in hour (3600)

    return date_time_difference


def __date_to_microseconds(date):  # microsecond 로 변환해 준다
    """
    :param date: datetime deltime obj
    :return: double type microseconds
    """
    millis = date.days * 24 * 60 * 60 * 1000
    millis += date.seconds * 1000
    millis += date.microseconds / 1000
    return millis
