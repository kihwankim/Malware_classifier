class Root(object):

    def __init__(self):
        self.__root = []

    @property
    def get_root(self):
        return self.__root

    def insert_datas(self, data, register_name):
        new_data = str(data).split("\\")
        if len(self.__root) == 0:
            self.__root.append(Node(1, new_data[0], [], []))
            self.__insert_all_data_dfs(self.__root[0], new_data, 1, register_name)
        else:
            return self.__insert_choiced_path_dfs(self.__root, new_data, 0, register_name)
        return True

    def __insert_choiced_path_dfs(self, now_root, left_data, start_index, registed_data):
        for data in now_root:
            if data.get_data == left_data[start_index]:
                data.set_child_access_number = data.get_child_access_number + 1
                if start_index + 1 == len(left_data):
                    data.get_end_of_file.append(registed_data)
                    return True
                return self.__insert_choiced_path_dfs(data.get_nexts, left_data, start_index + 1, registed_data)

        insert_node_data = Node(1, left_data[start_index], [], [])
        now_root.append(insert_node_data)

        return True

    def __insert_all_data_dfs(self, now_node, left_data, start_index, register_name):
        if start_index == len(left_data):
            now_node.get_end_of_file.append(register_name)
            return

        new_node = Node(1, left_data[start_index], [], [])
        now_node.get_nexts.append(new_node)
        self.__insert_all_data_dfs(new_node, left_data, start_index + 1, register_name)


class Node:
    def __init__(self, child_access_number, data, nexts, end_of_file):
        self.__child_access_number = child_access_number
        self.__data = data
        self.__nexts = nexts
        self.__end_of_file = end_of_file

    @property
    def get_child_access_number(self):
        return self.__child_access_number

    @get_child_access_number.setter
    def set_child_access_number(self, input_data):
        self.__child_access_number = input_data

    @property
    def get_data(self):
        return self.__data

    @get_data.setter
    def set_data(self, input_data):
        self.__data = input_data

    @property
    def get_nexts(self):
        return self.__nexts

    @get_nexts.setter
    def set_nexts(self, input_data):
        self.__nexts = input_data

    @property
    def get_end_of_file(self):
        return self.__end_of_file

    @get_end_of_file.setter
    def set_end_of_file(self, input_data):
        self.__end_of_file = input_data
